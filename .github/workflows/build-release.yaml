name: Build Release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          lfs: true

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            7.0.x

      - name: Restore
        run: dotnet restore

      # Publish each project to its own folder under $GITHUB_WORKSPACE/publish/<ProjectName>
      - name: Publish all projects (Release)
        shell: bash
        run: |
          set -euo pipefail

          # Find all csproj files (skip bin/obj). Add "-not -name '*Tests.csproj'" to skip tests.
          mapfile -t PROJECTS < <(find . -type f -name '*.csproj' \
                                    -not -path '*/bin/*' \
                                    -not -path '*/obj/*' \
                                    -print)

          if [[ ${#PROJECTS[@]} -eq 0 ]]; then
            echo "No .csproj files found."
            exit 1
          fi

          PUB_ROOT="$GITHUB_WORKSPACE/publish"
          rm -rf "$PUB_ROOT"
          mkdir -p "$PUB_ROOT"

          for PROJ in "${PROJECTS[@]}"; do
            PROJ_NAME="$(basename "$PROJ" .csproj)"
            OUT_DIR="$PUB_ROOT/$PROJ_NAME"
            echo "Publishing $PROJ -> $OUT_DIR"
            dotnet publish "$PROJ" --configuration Release --no-restore --output "$OUT_DIR"
          done

      - name: Zip published outputs
        id: zip
        shell: bash
        run: |
          set -euo pipefail

          TAG="${{ github.event.release.tag_name }}"
          PUB_ROOT="$GITHUB_WORKSPACE/publish"
          : > /tmp/zip_paths.txt

          for OUT_DIR in "$PUB_ROOT"/*; do
            [[ -d "$OUT_DIR" ]] || continue
            PROJ_NAME="$(basename "$OUT_DIR")"
            ZIP_NAME="${PROJ_NAME}-${TAG}.zip"
            (cd "$OUT_DIR" && zip -r "$GITHUB_WORKSPACE/$ZIP_NAME" . >/dev/null)
            echo "$GITHUB_WORKSPACE/$ZIP_NAME" >> /tmp/zip_paths.txt
          done

          # Write multiline output correctly (no quotes around the delimiter)
          DELIM="__ZIP_LIST__"
          {
            echo "files<<$DELIM"
            cat /tmp/zip_paths.txt
            echo "$DELIM"
          } >> "$GITHUB_OUTPUT"

      - name: Attach ZIPs to Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.zip.outputs.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}