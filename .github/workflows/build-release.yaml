name: Build Release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          lfs: true

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            7.0.x

      - name: Restore
        run: dotnet restore

      - name: Build all projects (Release)
        shell: bash
        run: |
          set -euo pipefail
          # Find all csproj files (skip bin/obj). Uncomment the -not -name filter to skip test projects by naming convention.
          mapfile -t PROJECTS < <(find . -type f -name '*.csproj' \
                                    -not -path '*/bin/*' \
                                    -not -path '*/obj/*' \
                                    -print)
          if [[ ${#PROJECTS[@]} -eq 0 ]]; then
            echo "No .csproj files found."
            exit 1
          fi

          for PROJ in "${PROJECTS[@]}"; do
            echo "Building: $PROJ"
            dotnet build "$PROJ" --configuration Release --no-restore
          done

      - name: Zip each project's Release output
        id: zip
        shell: bash
        run: |
          set -euo pipefail

          TAG="${{ github.event.release.tag_name }}"
          : > /tmp/zip_paths.txt  # clear file

          mapfile -t PROJECTS < <(find . -type f -name '*.csproj' \
                                    -not -path '*/bin/*' \
                                    -not -path '*/obj/*' \
                                    -print)

          for PROJ in "${PROJECTS[@]}"; do
            PROJ_DIR="$(dirname "$PROJ")"
            PROJ_NAME="$(basename "$PROJ" .csproj)"

            # Find the Release output directory that contains the main DLL (handles different TFMs).
            OUT_DIR="$(find "$PROJ_DIR/bin/Release" -type f -name "$PROJ_NAME.dll" -printf '%h\n' | head -n 1 || true)"
            if [[ -z "${OUT_DIR:-}" ]]; then
              echo "No Release output found for $PROJ_NAME; looked in $PROJ_DIR/bin/Release"
              exit 1
            fi

            # Optional: remove deps file if you don't want it in the zip
            # rm -f "$OUT_DIR/$PROJ_NAME.deps.json" || true

            ZIP_NAME="${PROJ_NAME}-${TAG}.zip"
            echo "Zipping $OUT_DIR -> $ZIP_NAME"
            (cd "$OUT_DIR" && zip -r "$GITHUB_WORKSPACE/$ZIP_NAME" . >/dev/null)

            echo "$GITHUB_WORKSPACE/$ZIP_NAME" >> /tmp/zip_paths.txt
          done

          # Expose newline-separated list of zip paths as a single output
          {
            echo "files<<'EOF'"
            cat /tmp/zip_paths.txt
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Attach ZIPs to Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.zip.outputs.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
